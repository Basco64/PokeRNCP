A faire

Sécurité

- Protection anti-brute-force sur /login (rate limiting)
- Validation stricte des entrées (types, longueurs, emails)
- Politiques de mot de passe et rotation des secrets

API et données

- DTOs/documentation OpenAPI (Swagger)

Ops/DevEx

- CI: fmt, clippy, build, tests
- Docker Compose (app + DB), variables d’environnement prod
- Logs structurés et tracing
- sqlx migrate + sqlx prepare (offline) pour la CI
- Scripts Makefile/Taskfile pour les commandes dev


Plan d’appel Frontend (résumé)
Au chargement:

POST /api/auth/refresh-token (sans header) → lit cookie “refresh”, place “auth”.
Si 401 → page login.

Login:

POST /api/auth/login → pose cookies “auth” + “refresh”
GET /api/auth/me pour remplir la session.

Profil:

GET /api/auth/me pour lecture
PATCH /api/users/{id} pour éditer (username/email/password)

Mot de passe oublié:

POST /api/auth/request-password-reset → récup token en dev
POST /api/auth/confirm-password-reset { token, new_password }
Pokédex:

GET /api/pokemons pour tout lister (griser si caught=false)
GET /api/pokemons/search?q=… pour suggestions
POST /api/pokemons/catch { name, nickname? } pour marquer capturé
GET /api/pokemons/{id} pour le détail
